@model ObraFacilApp.Models.AlvenariaModel

@{
    ViewData["Title"] = "Details";
}

<style>
    .green {
        color: green
    }

    .red {
        color: red
    }

    .progress-bar {
        width: 100%;
        height: 20px;
        background-color: #f0f0f0;
        border-radius: 10px;
        overflow: hidden;
    }

    .progress {
        height: 100%;
        background-color: #4caf50;
        width: 0;
        transition: width 0.3s ease-in-out;
    }
</style>

<div>
    <h4>Alvenaria</h4>
    <hr />
    <div class="row">
        <table class="table">
            <tbody>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.MetrosDeParede)</th>
                    <td>@Model.MetrosDeParede</td>
                    <td>@(Model.MetrosDeParedeOK ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.AlturaBloco)</th>
                    <td>@Model.AlturaBloco</td>
                </tr>
                <tr>
                    <th> @Html.DisplayNameFor(model => model.ComprimentoBlocos)</th>
                    <td>@Model.ComprimentoBlocos</td>
                </tr>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.QtdBlocos)</th>
                    <td>@Model.QtdBlocos</td>
                    <td>@(Model.QtdBlocosOk ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>
              
                <tr>
                    <th>@Html.DisplayNameFor(model => model.QtdPilares)</th>
                    <td>@Model.QtdPilares</td>
                    <td>@(Model.QtdPilaresOk ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.PrevisaoCusto)</th>
                    <td>@Model.PrevisaoCusto</td>
                </tr>

                <tr>

                    <th>@Html.DisplayNameFor(model => model.DataInicioAlvenaria)</th>
                    <td>@Model.DataInicioAlvenaria.ToString("dd/MM/yyyy")</td>
                    <td>@(Model.DataInicioAlvenariaOk ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>
                <tr>

                    <th> @Html.DisplayNameFor(model => model.DataConclusaoAlvenaria)</th>
                    <td>@Model.DataConclusaoAlvenaria.ToString("dd/MM/yyyy") </td>
                    <td>@(Model.DataConclusaoAlvenariaOk ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                    
                </tr>
            </tbody>
        </table>
        <div class="progress-bar">
            <div class="progress" style="text-align:center">
                <span class="progress-percentage">0%</span>
            </div>
        </div>
    </div>
</div>
<div>
    
    <a asp-controller="Etapas" asp-action="Index" asp-route-id="@Model.ProjetoId">Voltar</a>
</div>
@section Scripts
    {
    <script>
        const booleanArray = [@(Model.MetrosDeParedeOK.ToString().ToLower()), @(Model.QtdBlocosOk.ToString().ToLower()), @(Model.QtdPilaresOk.ToString().ToLower()), @(Model.DataInicioAlvenariaOk.ToString().ToLower()), @(Model.DataConclusaoAlvenariaOk.ToString().ToLower())];

        function updateProgressBar() {
            const progressBar = document.querySelector('.progress');
            const progressPercentage = (booleanArray.filter(Boolean).length / booleanArray.length) * 100;
            progressBar.style.width = progressPercentage + '%';

            const progressPercentageElement = document.querySelector('.progress-percentage');
            progressPercentageElement.textContent = Math.round(progressPercentage) + '%';
        }

        updateProgressBar(); // Update the progress bar initially
    </script>
    }