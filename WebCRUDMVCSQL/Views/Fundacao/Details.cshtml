@model ObraFacilApp.Models.FundacaoModel

@{
    ViewData["Title"] = "Details";

}

<style>
    .green {
        color: green
    }

    .red {
        color: red
    }

    .progress-bar {
        width: 100%;
        height: 20px;
        background-color: #f0f0f0;
        border-radius: 10px;
        overflow: hidden;
    }

    .progress {
        height: 100%;
        background-color: #4caf50;
        width: 0;
        transition: width 0.3s ease-in-out;
    }
</style>


<div>
    <h4>Fundação</h4>
    <hr />
    <div class="row">
        <input type="hidden" asp-for="ComprimentoAlicerce" />
        <input type="hidden" asp-for="AlturaAlicerce" />
        <input type="hidden" asp-for="ComprimentoPedra" />
        <input type="hidden" asp-for="AlturaPedra" />


        <div style="display: flex; margin-bottom: 10px">
            @foreach (var item in Model.Imagens)
            {
                <div style="display:block; text-align:center; margin: 2px;">
                    <img src="../../imagens/UploadFundacao/@(item.FileName)" class="card-img-top" style="width: 300px" alt="...">
                    <div>
                        <a asp-action="Delete" asp-controller="Imagens" asp-route-id="@item.Id"> <i class="fa fa-trash" style=" color:gray"></i></a>
                    </div>
                </div>
            }
        </div>

        <table class="table">
            <tbody>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.ComprimentoAlicerce)</th>
                    <td>@Model.ComprimentoAlicerce</td>
                    <td>-</td>
                </tr>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.AlturaAlicerce)</th>
                    <td>@Model.AlturaAlicerce</td>
                    <td>-</td>
                </tr>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.AlicerceOK)</th>
                    <td>--</td>
                    <td>@(Model.AlicerceOK ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.QtdBlocosAlicerce)</th>
                    <td id="resultadoBlocos" style="font-weight: bold;"></td>
                    <td>-</td>
                    @*<td>@(Model.QtdBlocosAlicerceOK ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>*@
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.AlturaPedra)</th>
                    <td>@Model.AlturaPedra</td>
                    <td>-</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.ComprimentoPedra)</th>
                    <td>@Model.ComprimentoPedra</td>
                    <td>-</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.AlturaVigaBaldrame)</th>
                    <td>@Model.AlturaVigaBaldrame</td>
                    <td>-</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.ComprimentoVigaBaldrame)</th>
                    <td>@Model.ComprimentoVigaBaldrame</td>
                    <td>-</td>
                </tr>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.LarguraVigaBaldrame)</th>
                    <td>@Model.LarguraVigaBaldrame</td>
                    <td>-</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.MetragemCubicaCimentoVigaBaldrama)</th>
                    <td>@Model.MetragemCubicaCimentoVigaBaldrama</td>
                    <td>-</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.VigaBaldrameOK)</th>
                    <td>--</td>
                    <td>@(Model.VigaBaldrameOK ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.IpermeabilizacaoVigaBaldrameOK)</th>
                    <td>--</td>
                    <td>@(Model.IpermeabilizacaoVigaBaldrameOK ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.QtdMicro)</th>
                    <td>@Model.QtdMicro</td>
                    <td>@(Model.QtdMicroOK ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.PrevisaoCusto)</th>
                    <td>@Model.PrevisaoCusto</td>
                    <td>-</td>
                </tr>

                <tr>
                    <th>@Html.DisplayNameFor(model => model.DataInicioFundacao)</th>
                    <td>@Model.DataInicioFundacao.ToString("dd/MM/yyyy")</td>
                    <td>@(Model.DataInicioFundacaoOK ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.DataConclusaoFundacao)</th>
                    <td>@Model.DataConclusaoFundacao.ToString("dd/MM/yyyy")</td>
                    <td>@(Model.DataConclusaoFundacaoOK ? Html.Raw("<i class='fas fa-check green'></i>") : Html.Raw("<i class='fas fa-times red'></i>"))</td>
                </tr>
            </tbody>

        </table>
        <div class="progress-bar">
            <div class="progress text-center" style="text-align:center">
                <span class="progress-percentage w-100">0%</span>
            </div>
        </div>

    </div>

</div>
<div>
    <a asp-controller="Etapas" asp-action="Index" asp-route-id="@Model.ProjetoId">Voltar</a>
</div>

@section Scripts
    {
    <script>
        $(document).ready(function () {

            function qtdBlocos() {
                var comprimentoAlicerce = parseFloat($('#ComprimentoAlicerce').val());
                var alturaAlicerce = parseFloat($('#AlturaAlicerce').val());
                var comprimentoPedra = parseFloat($('#ComprimentoPedra').val());
                var alturaPedra = parseFloat($('#AlturaPedra').val());
                var qtdBlocos = (comprimentoAlicerce * alturaAlicerce) / (comprimentoPedra * alturaPedra);
                var qtdBlocosInteiro = Math.floor(qtdBlocos);

                $('#resultadoBlocos').text(qtdBlocosInteiro);
            }

            $('#ComprimentoAlicerce, #AlturaAlicerce, #ComprimentoPedra, #AlturaPedra').on('input', function () {
                qtdBlocos();
            });
            qtdBlocos();
        });
    </script>
    <script>
        $(document).ready(function () {
            const booleanArray = [@(Model.AlicerceOK.ToString().ToLower()), @(Model.DataConclusaoFundacaoOK.ToString().ToLower()), @(Model.DataInicioFundacaoOK.ToString().ToLower()), @(Model.QtdMicroOK.ToString().ToLower()), @(Model.IpermeabilizacaoVigaBaldrameOK.ToString().ToLower()), @(Model.VigaBaldrameOK.ToString().ToLower())];
            function updateProgressBar() {
                const progressBar = document.querySelector('.progress');
                const progressPercentage = (booleanArray.filter(Boolean).length / booleanArray.length) * 100;
                progressBar.style.width = progressPercentage + '%';

                const progressPercentageElement = document.querySelector('.progress-percentage');
                progressPercentageElement.textContent = Math.round(progressPercentage) + '%';
            }

            updateProgressBar(); // Update the progress bar initially
        });
    </script>
    }